{"version":3,"sources":["pages/ViewPost/ViewPost.js"],"names":["timeDifference","current","previous","msPerMinute","msPerHour","msPerDay","msPerMonth","msPerYear","elapsed","Math","round","initialState","postLoading","postDetails","postErrorMessage","postLoaded","reducer","state","action","type","post","error","replies","reply","retweetUsers","findIndex","u","username","localStorage","getItem","filter","unshift","firstName","lastName","profilePic","allPostLikes","likes","postId","_id","likeUserFoundIndex","like","splice","push","foundReplyPost","find","p","console","log","findUserLikeIndex","allReplies","foundReplyPostIndex","r","replyPostId","ViewPost","props","dispatch2","useDispatch","useReducer","postState","dispatch","userDetails","useSelector","user","postActionLoading","retweetActionLoading","posts","socket","useSocket","deleteToastId","useRef","pinToastId","replyToastId","retweetToastId","likePostReq","originalPostId","postedByUsername","likePost","emit","notificationFrom","notificationTo","length","submitReplyReq","formData","a","toast","warning","replyPost","result","dismiss","success","deletePostReq","deletePost","then","pinPost","pinPostUser","retweetReq","retweetPost","deletePostReqGoHome","history","goToProfile","useEffect","location","foundPost","axios","get","match","params","headers","Authorization","response","data","message","getSinglePost","renderReplies","map","postreply","postedBy","content","createdAt","Date","retweetData","replyTo","loggedInUsername","pinnedPostId","pinnedPost","disableBorderBottom","replyToUsername","originalPost","replyPostTypeReplyToUsername","postIdHasGreenBackground","backgroundGreenPostId","className","width"],"mappings":"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","file":"static/js/18.c3715f92.chunk.js","sourcesContent":["import React, { useEffect, useReducer, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deletePost, likePost, replyPost, retweetPost } from \"../../store/Actions/post\";\r\nimport Post from \"../../components/Homepage/PostsList/Post/Post\";\r\nimport axios from \"../../axios\";\r\nimport \"./ViewPost.scss\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport history from \"../../history\";\r\nimport { pinPostUser } from \"../../store/Actions/user\";\r\nimport { toast } from \"react-toastify\";\r\nimport useSocket from \"../../shared/socketCustomHook\";\r\n\r\nconst timeDifference = (current, previous) => {\r\n  const msPerMinute = 60 * 1000;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n  const msPerMonth = msPerDay * 30;\r\n  const msPerYear = msPerDay * 365;\r\n\r\n  const elapsed = current - previous;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    if (elapsed / 1000 < 30) return \"Just Now\";\r\n    return Math.round(elapsed / 1000) + \" seconds ago\";\r\n  } else if (elapsed < msPerHour) {\r\n    return Math.round(elapsed / msPerMinute) + \" minutes ago\";\r\n  } else if (elapsed < msPerDay) {\r\n    return Math.round(elapsed / msPerHour) + \" hours ago\";\r\n  } else if (elapsed < msPerMonth) {\r\n    return Math.round(elapsed / msPerDay) + \" days ago\";\r\n  } else if (elapsed < msPerYear) {\r\n    return Math.round(elapsed / msPerMonth) + \" months ago\";\r\n  } else {\r\n    return Math.round(elapsed / msPerYear) + \" years ago\";\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  postLoading: false,\r\n  postDetails: null,\r\n  postErrorMessage: null,\r\n  postLoaded: false\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"fetch_post\":\r\n      return {\r\n        ...state,\r\n        postDetails: action.post,\r\n        postErrorMessage: null,\r\n        postLoading: false,\r\n        postLoaded: true\r\n      };\r\n    case \"post_loading\":\r\n      return {\r\n        ...state,\r\n        postLoading: true,\r\n      };\r\n    case \"post_error\":\r\n      return {\r\n        ...state,\r\n        postErrorMessage: action.error,\r\n        postLoading: false,\r\n      };\r\n    case \"add_reply\":\r\n      return {\r\n        ...state,\r\n        postLoading: false,\r\n        postDetails: {\r\n          ...state.postDetails,\r\n          replies: [...state.postDetails.replies, action.reply],\r\n        },\r\n      };\r\n    case \"retweet\":\r\n      let retweetUsers = [...state.postDetails.retweetUsers];\r\n      const retweetUsersIndex = retweetUsers.findIndex(u => u.username === localStorage.getItem('userName'));\r\n      if (retweetUsersIndex > -1) {\r\n        retweetUsers = retweetUsers.filter(u => u.username !== localStorage.getItem('userName'));\r\n      } else {\r\n        retweetUsers.unshift({\r\n          firstName: localStorage.getItem('firstName'),\r\n          lastName: localStorage.getItem('lastName'),\r\n          username: localStorage.getItem('userName'),\r\n          profilePic: localStorage.getItem('profilePic'),\r\n        });\r\n      }\r\n      return {\r\n        ...state,\r\n        postDetails: {\r\n          ...state.postDetails,\r\n          retweetUsers: retweetUsers\r\n        }\r\n      };\r\n    case 'like_post':\r\n      const allPostLikes = [...state.postDetails.likes];\r\n      if (action.postId === state.postDetails._id) {\r\n        const likeUserFoundIndex = allPostLikes.findIndex(like => like.username === localStorage.getItem('userName'));\r\n        if (likeUserFoundIndex > -1) {\r\n          allPostLikes.splice(likeUserFoundIndex, 1);\r\n        } else {\r\n          allPostLikes.push({\r\n            firstName: localStorage.getItem('firstName'),\r\n            lastName: localStorage.getItem('lastName'),\r\n            username: localStorage.getItem('userName'),\r\n            profilePic: localStorage.getItem('profilePic'),\r\n          });\r\n        }\r\n      } else {\r\n        const foundReplyPost = state.postDetails.replies.find(\r\n          (p) => p._id === action.postId\r\n        );\r\n        console.log(foundReplyPost);\r\n        if (foundReplyPost) {\r\n          const findUserLikeIndex = foundReplyPost.likes.findIndex(\r\n            (p) => p.username === localStorage.getItem('userName')\r\n          );\r\n          if (findUserLikeIndex > -1) {\r\n            foundReplyPost.likes.splice(findUserLikeIndex, 1);\r\n          } else {\r\n            foundReplyPost.likes.push({\r\n              firstName: localStorage.getItem('firstName'),\r\n              lastName: localStorage.getItem('lastName'),\r\n              profilePic: localStorage.getItem('profilePic'),\r\n              username: localStorage.getItem('userName'),\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        postDetails: {\r\n          ...state.postDetails,\r\n          likes: [...allPostLikes]\r\n        },\r\n      };\r\n    case 'delete_reply_post':\r\n      const allReplies = [...state.postDetails.replies];\r\n      const foundReplyPostIndex = allReplies.findIndex(r => r._id === action.replyPostId);\r\n      allReplies.splice(foundReplyPostIndex, 1);\r\n      return {\r\n        ...state,\r\n        postDetails: {\r\n          ...state.postDetails,\r\n          replies: [...allReplies]\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst ViewPost = (props) => {\r\n  const dispatch2 = useDispatch();\r\n  const [postState, dispatch] = useReducer(reducer, initialState);\r\n  const { userDetails } = useSelector((state) => state.user);\r\n  const { postActionLoading, retweetActionLoading, posts } = useSelector(\r\n    (state) => state.post\r\n  );\r\n\r\n  const {socket} = useSocket();\r\n\r\n  const deleteToastId = useRef();\r\n  const pinToastId = useRef();\r\n  const replyToastId = useRef();\r\n  const retweetToastId = useRef();\r\n\r\n  const likePostReq = (postId, originalPostId, postedByUsername) => {\r\n    dispatch2(likePost(postId, originalPostId));\r\n    if (postedByUsername !== userDetails.username) {\r\n      socket.current.emit('notification Sent', {\r\n        notificationFrom: userDetails.username,\r\n        notificationTo: [postedByUsername],\r\n        type: 'like',\r\n        postId: postId\r\n      });\r\n    }\r\n    // here if condition because there's already a reducer that does this dispatch in posts array\r\n    if (posts.length <= 0) {\r\n      dispatch({\r\n        type: 'like_post',\r\n        postId: postId,\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  const submitReplyReq = async (formData, postId, postedByUsername) => {\r\n    replyToastId.current = toast.warning('Submitting Your Reply...');\r\n    const result = await dispatch2(replyPost(formData.reply, postId));\r\n    toast.dismiss(replyToastId.current);\r\n    toast.success('Reply Post Success');\r\n    socket.current.emit('notification Sent', {\r\n      notificationFrom: userDetails.username,\r\n      notificationTo: [postedByUsername],\r\n      type: 'reply',\r\n      postId: postId\r\n    });\r\n    dispatch({\r\n      type: \"add_reply\",\r\n      reply: result.post,\r\n    });\r\n  };\r\n\r\n  const deletePostReq = (postId, originalPostId) => {\r\n    deleteToastId.current = toast.warning('Deleting Your Post...');\r\n    dispatch({\r\n      type: 'delete_reply_post',\r\n      replyPostId: postId\r\n    });\r\n    dispatch2(deletePost(postId, originalPostId)).then(() => {\r\n      toast.dismiss(deleteToastId.current);\r\n      toast.success('Delete Post Success');\r\n    });\r\n  };\r\n\r\n  const pinPost = postId => {\r\n    pinToastId.current = toast.warning('Pinning Post...');\r\n    dispatch2(pinPostUser(postId)).then(() => {\r\n      toast.dismiss(pinToastId.current);\r\n      toast.success('Pin Post Success');\r\n    });\r\n  };\r\n\r\n  const retweetReq = (postId, originalPostId, postedByUsername) => {\r\n    if (posts.length <= 0) {\r\n      dispatch({\r\n        type: \"retweet\",\r\n        postId: postId\r\n      });\r\n    }\r\n    retweetToastId.current = toast.warning('Submitting Your retweet...');\r\n    dispatch2(retweetPost(postId, originalPostId)).then(() => {\r\n      toast.dismiss(retweetToastId.current);\r\n      toast.success('Retweet Success');\r\n      if (postedByUsername !== userDetails.username) {\r\n        socket.current.emit('notification Sent', {\r\n          notificationFrom: userDetails.username,\r\n          notificationTo: [postedByUsername],\r\n          type: 'retweet',\r\n          postId: postId\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const deletePostReqGoHome = (postId, originalPostId) => {\r\n    dispatch({type: 'post_loading'});\r\n    dispatch2(deletePost(postId, originalPostId)).then(() => {\r\n      history.push('/');\r\n    });\r\n  };\r\n\r\n  const goToProfile = username => {\r\n    history.push(`/profile/${username}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if ((!posts || posts.length <= 0 || !history.location.state || !history.location.state.postId) && !postState.postLoaded) {\r\n      dispatch({\r\n        type: \"post_loading\",\r\n      });\r\n      const getSinglePost = async () => {\r\n        try {\r\n          const response = await axios.get(\r\n            `/post/${props.match.params.postId}`,\r\n            {\r\n              headers: {\r\n                Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\"),\r\n              },\r\n            }\r\n          );\r\n          console.log(\"responsedata\", response.data);\r\n          dispatch({\r\n            type: \"fetch_post\",\r\n            post: response.data,\r\n          });\r\n        } catch (err) {\r\n          console.log(err);\r\n          dispatch({\r\n            type: \"post_error\",\r\n            error:\r\n              err.response && err.response.data && err.response.data.message\r\n                ? err.response.data.message\r\n                : err.message,\r\n          });\r\n        }\r\n      };\r\n      getSinglePost();\r\n    } else {\r\n\r\n      if (posts.length > 0 && history.location.state && history.location.state.postId) {\r\n\r\n        const foundPost = posts.find(\r\n          (post) => post._id === history.location.state.postId\r\n        );\r\n        dispatch({\r\n          type: \"fetch_post\",\r\n          post: foundPost,\r\n        });\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }, [props.match.params.postId, posts, postState.postLoaded]);\r\n\r\n  const renderReplies =\r\n    postState.postDetails &&\r\n    postState.postDetails.replies.map((postreply) => {\r\n      return (\r\n        <Post\r\n          key={postreply._id}\r\n          postId={postreply._id}\r\n          firstName={postreply.postedBy.firstName}\r\n          lastName={postreply.postedBy.lastName}\r\n          username={postreply.postedBy.username}\r\n          content={postreply.content}\r\n          createdAt={timeDifference(\r\n            new Date(),\r\n            new Date(\r\n              postreply.content\r\n                ? postreply.createdAt\r\n                : postreply.retweetData.createdAt\r\n            )\r\n          )}\r\n          goToProfile={goToProfile}\r\n          profilePic={postreply.postedBy.profilePic}\r\n          likePostReq={likePostReq}\r\n          replyTo={postreply.replyTo || null}\r\n          likes={postreply.likes}\r\n          deletePost={deletePostReq}\r\n          postActionLoading={postActionLoading}\r\n          loggedInUsername={\r\n            userDetails ? userDetails.username: localStorage.getItem(\"userName\")\r\n          }\r\n          retweetReq={retweetReq}\r\n          retweetActionLoading={retweetActionLoading}\r\n          retweetUsers={postreply.retweetUsers || []}\r\n          retweetData={postreply.retweetData}\r\n          submitReplyReq={submitReplyReq}\r\n          pinPost={() => pinPost(postreply._id)}\r\n          pinnedPostId={userDetails && userDetails.pinnedPost ? userDetails.pinnedPost._id: null}\r\n          disableBorderBottom={true}\r\n          replyToUsername={\r\n            postreply.replyTo && postreply.replyTo.originalPost\r\n              ? postreply.replyTo.originalPost.postedBy.username\r\n              : null\r\n          }\r\n          type=\"replyPost\"\r\n          replyPostTypeReplyToUsername={postState.postDetails.postedBy.username}\r\n          postIdHasGreenBackground={\r\n            history.location.state\r\n              ? history.location.state.backgroundGreenPostId\r\n              : null\r\n          }\r\n        />\r\n      );\r\n    });\r\n\r\n  console.log(\"VIEWPOST RENDERED\");\r\n\r\n  const renderPostWithReplies = () => {\r\n    return postState && !postState.postLoading && postState.postDetails ? (\r\n      <>\r\n        <Post\r\n          postId={postState.postDetails._id}\r\n          firstName={postState.postDetails.postedBy.firstName}\r\n          lastName={postState.postDetails.postedBy.lastName}\r\n          username={postState.postDetails.postedBy.username}\r\n          content={postState.postDetails.content}\r\n          createdAt={timeDifference(\r\n            new Date(),\r\n            new Date(\r\n              postState.postDetails.content\r\n                ? postState.postDetails.createdAt\r\n                : postState.postDetails.retweetData.createdAt\r\n            )\r\n          )}\r\n          profilePic={postState.postDetails.postedBy.profilePic}\r\n          likePostReq={likePostReq}\r\n          likes={postState.postDetails.likes}\r\n          postActionLoading={postActionLoading}\r\n          loggedInUsername={\r\n            userDetails ? userDetails.username: localStorage.getItem(\"userName\")\r\n          }\r\n          goToProfile={goToProfile}\r\n          retweetReq={retweetReq}\r\n          retweetActionLoading={retweetActionLoading}\r\n          retweetUsers={postState.postDetails.retweetUsers}\r\n          retweetData={postState.postDetails.retweetData}\r\n          submitReplyReq={submitReplyReq}\r\n          replyToUsername={\r\n            postState.postDetails.replyTo &&\r\n            postState.postDetails.replyTo.originalPost\r\n              ? postState.postDetails.replyTo.originalPost.postedBy.username\r\n              : null\r\n          }\r\n          replyPostTypeReplyToUsername={postState.postDetails.postedBy.username}\r\n          deletePost={deletePostReqGoHome}\r\n          pinnedPost={false}\r\n          pinnedPostId={userDetails && userDetails.pinnedPost ? userDetails.pinnedPost._id: null}\r\n          pinPost={() => pinPost(postState.postDetails._id)}\r\n        />\r\n        {postState.postDetails.replies &&\r\n          postState.postDetails.replies.length > 0 && <h5>Replies:</h5>}\r\n        {postState.postDetails.replies &&\r\n          postState.postDetails.replies.length > 0 &&\r\n          renderReplies}\r\n      </>\r\n    ) : (\r\n      <Spinner width=\"80\" />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"viewpost\">\r\n      <h1>View Post</h1>\r\n      {postState.postErrorMessage ? (\r\n        <p className=\"error\">{postState.postErrorMessage}</p>\r\n      ) : (\r\n        renderPostWithReplies()\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewPost;\r\n"],"sourceRoot":""}