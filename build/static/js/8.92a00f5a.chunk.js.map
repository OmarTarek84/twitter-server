{"version":3,"sources":["components/Paginate/Paginate.js","components/Homepage/Postfeed/Postfeed.js","components/Homepage/PostsList/PostsList.js","pages/Homepage/Homepage.js"],"names":["Paginate","handlePageChange","pageSize","totalItemsCount","currentPage","itemClass","linkClass","activePage","itemsCountPerPage","pageRangeDisplayed","onChange","Postfeed","userDetails","useSelector","state","user","useForm","register","handleSubmit","errors","reset","useState","loading","setLoading","dispatch","useDispatch","className","src","profilePic","localStorage","getItem","alt","onSubmit","formData","createPost","then","catch","err","name","placeholder","ref","required","Spinner","width","type","disabled","timeDifference","current","previous","msPerMinute","msPerHour","msPerDay","msPerMonth","msPerYear","elapsed","Math","round","PostsList","posts","likePostReq","postActionLoading","submitReplyReq","viewSinglePostReq","retweetActionLoading","loggedInUsername","retweetReq","deletePost","goToProfile","pinPost","pinnedPost","pinnedPostId","renderPosts","map","post","Post","postId","_id","firstName","postedBy","lastName","username","content","createdAt","Date","retweetData","likes","retweetUsers","replyTo","originalPost","Homepage","deleteToastId","useRef","pinToastId","replyToastId","retweetToastId","socket","useSocket","postLoading","errorMessage","pages","useEffect","getPosts","originalPostId","postedByUsername","likePost","emit","notificationFrom","notificationTo","toast","warning","retweetPost","dismiss","success","replyPost","reply","replyPostId","history","push","backgroundGreenPostId","pinPostUser","replyToUsername","replyPostTypeReplyToUsername","pageNumber"],"mappings":"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","file":"static/js/8.92a00f5a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Paginate.scss';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nconst Paginate = ({handlePageChange, pageSize, totalItemsCount, currentPage }) => {\r\n    return (\r\n        <Pagination\r\n            itemClass=\"page-item\"\r\n            linkClass=\"page-link\"\r\n            activePage={currentPage}\r\n            itemsCountPerPage={pageSize}\r\n            totalItemsCount={totalItemsCount}\r\n            pageRangeDisplayed={10}\r\n            onChange={handlePageChange}\r\n      />\r\n    )\r\n};\r\n\r\nexport default Paginate;","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Postfeed.scss\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createPost } from \"../../../store/Actions/post\";\r\nimport Spinner from \"../../Spinner/Spinner\";\r\n\r\nconst Postfeed = () => {\r\n  const { userDetails } = useSelector((state) => state.user);\r\n  const { register, handleSubmit, errors, reset } = useForm();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const submitPostFeed = (formData) => {\r\n    setLoading(true);\r\n    dispatch(createPost(formData))\r\n      .then(() => {\r\n        reset();\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => setLoading(false));\r\n  };\r\n\r\n  const renderRequestButton = () => {\r\n    if (loading) {\r\n      return (\r\n        <div className=\"spinner\">\r\n          <Spinner width=\"40px\" />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n          type=\"submit\"\r\n          disabled={!!errors[\"content\"]}\r\n          className=\"btn btn-primary\"\r\n        >\r\n          Post\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"postfeed\">\r\n      <div className=\"postflex\">\r\n        <div className=\"profilePic\">\r\n          <img\r\n            src={userDetails?.profilePic || localStorage.getItem(\"profilePic\")}\r\n            alt=\"profile pic\"\r\n          />\r\n        </div>\r\n        <form onSubmit={handleSubmit(submitPostFeed)}>\r\n          <textarea\r\n            name=\"content\"\r\n            placeholder=\"What's Happening?\"\r\n            ref={register({ required: true })}\r\n          ></textarea>\r\n          {renderRequestButton()}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Postfeed;\r\n","import React from \"react\";\r\nimport \"./PostsList.scss\";\r\nimport Post from \"./Post/Post\";\r\n\r\nconst timeDifference = (current, previous) => {\r\n  const msPerMinute = 60 * 1000;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n  const msPerMonth = msPerDay * 30;\r\n  const msPerYear = msPerDay * 365;\r\n\r\n  const elapsed = current - previous;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    if (elapsed / 1000 < 30) return \"Just Now\";\r\n    return Math.round(elapsed / 1000) + \" seconds ago\";\r\n  } else if (elapsed < msPerHour) {\r\n    return Math.round(elapsed / msPerMinute) + \" minutes ago\";\r\n  } else if (elapsed < msPerDay) {\r\n    return Math.round(elapsed / msPerHour) + \" hours ago\";\r\n  } else if (elapsed < msPerMonth) {\r\n    return Math.round(elapsed / msPerDay) + \" days ago\";\r\n  } else if (elapsed < msPerYear) {\r\n    return Math.round(elapsed / msPerMonth) + \" months ago\";\r\n  } else {\r\n    return Math.round(elapsed / msPerYear) + \" years ago\";\r\n  }\r\n};\r\n\r\nconst PostsList = ({\r\n  posts,\r\n  likePostReq,\r\n  postActionLoading,\r\n  submitReplyReq,\r\n  viewSinglePostReq,\r\n  retweetActionLoading,\r\n  loggedInUsername,\r\n  retweetReq,\r\n  deletePost,\r\n  goToProfile,\r\n  pinPost,\r\n  pinnedPost,\r\n  pinnedPostId\r\n}) => {\r\n  const renderPosts = posts.map((post) => {\r\n    return (\r\n      <Post\r\n        key={post._id}\r\n        postId={post._id}\r\n        firstName={post.postedBy.firstName}\r\n        lastName={post.postedBy.lastName}\r\n        username={post.postedBy.username}\r\n        content={post.content}\r\n        createdAt={timeDifference(\r\n          new Date(),\r\n          new Date(post.content ? post.createdAt : post.retweetData.createdAt)\r\n        )}\r\n        goToProfile={goToProfile}\r\n        profilePic={post.postedBy.profilePic}\r\n        likePostReq={likePostReq}\r\n        likes={post.likes}\r\n        postActionLoading={postActionLoading}\r\n        loggedInUsername={loggedInUsername}\r\n        retweetReq={retweetReq}\r\n        retweetActionLoading={retweetActionLoading}\r\n        retweetUsers={post.retweetUsers}\r\n        retweetData={post.retweetData}\r\n        submitReplyReq={submitReplyReq}\r\n        replyTo={post.replyTo || null}\r\n        viewSinglePostReq={() => viewSinglePostReq(post._id, post.replyTo ? post.replyTo.originalPost._id: null)}\r\n        deletePost={deletePost}\r\n        pinPost={pinPost}\r\n        pinnedPost={pinnedPost}\r\n        pinnedPostId={pinnedPostId}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      {renderPosts}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostsList;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getPosts,\r\n  likePost,\r\n  replyPost,\r\n  retweetPost,\r\n  deletePost,\r\n} from \"../../store/Actions/post\";\r\nimport { pinPostUser } from \"../../store/Actions/user\";\r\nimport \"./Homepage.scss\";\r\nimport Postfeed from \"../../components/Homepage/Postfeed/Postfeed\";\r\nimport PostsList from \"../../components/Homepage/PostsList/PostsList\";\r\nimport history from \"../../history\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport Paginate from \"../../components/Paginate/Paginate\";\r\nimport Post from \"../../components/Homepage/PostsList/Post/Post\";\r\nimport { toast } from \"react-toastify\";\r\nimport useSocket from \"../../shared/socketCustomHook\";\r\n\r\nconst timeDifference = (current, previous) => {\r\n  const msPerMinute = 60 * 1000;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n  const msPerMonth = msPerDay * 30;\r\n  const msPerYear = msPerDay * 365;\r\n\r\n  const elapsed = current - previous;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    if (elapsed / 1000 < 30) return \"Just Now\";\r\n    return Math.round(elapsed / 1000) + \" seconds ago\";\r\n  } else if (elapsed < msPerHour) {\r\n    return Math.round(elapsed / msPerMinute) + \" minutes ago\";\r\n  } else if (elapsed < msPerDay) {\r\n    return Math.round(elapsed / msPerHour) + \" hours ago\";\r\n  } else if (elapsed < msPerMonth) {\r\n    return Math.round(elapsed / msPerDay) + \" days ago\";\r\n  } else if (elapsed < msPerYear) {\r\n    return Math.round(elapsed / msPerMonth) + \" months ago\";\r\n  } else {\r\n    return Math.round(elapsed / msPerYear) + \" years ago\";\r\n  }\r\n};\r\n\r\nconst Homepage = () => {\r\n  // const {userName} = useSelector(state => state.user);\r\n\r\n  const deleteToastId = useRef();\r\n  const pinToastId = useRef();\r\n  const replyToastId = useRef();\r\n  const retweetToastId = useRef();\r\n\r\n  const {socket} = useSocket();\r\n\r\n  const dispatch = useDispatch();\r\n  const {\r\n    posts,\r\n    postActionLoading,\r\n    retweetActionLoading,\r\n    postLoading,\r\n    errorMessage,\r\n    currentPage,\r\n    pageSize,\r\n    pages,\r\n    totalItemsCount,\r\n  } = useSelector((state) => state.post);\r\n  const { userDetails } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    dispatch(getPosts(1, 30, \"\"));\r\n  }, [dispatch]);\r\n\r\n  const likePostReq = (postId, originalPostId, postedByUsername) => {\r\n    dispatch(likePost(postId, originalPostId));\r\n    if (postedByUsername !== userDetails.username) {\r\n      socket.current.emit('notification Sent', {\r\n        notificationFrom: userDetails.username,\r\n        notificationTo: [postedByUsername],\r\n        postId: postId,\r\n        type: 'like'\r\n      });\r\n    }\r\n  };\r\n\r\n  const retweetReq = (postId, originalPostId, postedByUsername) => {\r\n    retweetToastId.current = toast.warning(\"Submitting Your retweet...\");\r\n    dispatch(retweetPost(postId, originalPostId)).then(() => {\r\n      toast.dismiss(retweetToastId.current);\r\n      toast.success(\"Retweet Success\");\r\n      if (postedByUsername !== userDetails.username) {\r\n        socket.current.emit('notification Sent', {\r\n          notificationFrom: userDetails.username,\r\n          notificationTo: [postedByUsername],\r\n          postId: postId,\r\n          type: 'retweet'\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const submitReplyReq = (formData, postId, postedByUsername) => {\r\n    replyToastId.current = toast.warning(\"Submitting Your Reply...\");\r\n    dispatch(replyPost(formData.reply, postId)).then(() => {\r\n      toast.dismiss(replyToastId.current);\r\n      toast.success(\"Reply Post Success\");\r\n      socket.current.emit('notification Sent', {\r\n        notificationFrom: userDetails.username,\r\n        notificationTo: [postedByUsername],\r\n        postId: postId,\r\n        type: 'reply'\r\n      });\r\n    });\r\n  };\r\n\r\n  const viewSinglePostReq = (postId, replyPostId) => {\r\n    history.push(`/post/${replyPostId || postId}`, {\r\n      postId: replyPostId || postId,\r\n      backgroundGreenPostId: postId,\r\n    });\r\n  };\r\n\r\n  const deletePostReq = (postId, originalPostId) => {\r\n    deleteToastId.current = toast.warning(\"Delete post in progress\");\r\n    dispatch(deletePost(postId, originalPostId)).then(() => {\r\n      toast.dismiss(deleteToastId.current);\r\n      toast.success(\"Delete Post Success\");\r\n    });\r\n  };\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    dispatch(getPosts(pageNumber, 30, \"\"));\r\n  };\r\n\r\n  const goToProfile = (username) => {\r\n    history.push(`/profile/${username}`);\r\n  };\r\n\r\n  const pinPost = (postId) => {\r\n    pinToastId.current = toast.warning(\"Pinning Post...\");\r\n    dispatch(pinPostUser(postId)).then(() => {\r\n      toast.dismiss(pinToastId.current);\r\n      toast.success(\"Pin Post Success\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"homepage\">\r\n      <h1>Home</h1>\r\n      <Postfeed />\r\n      {userDetails && userDetails.pinnedPost && (\r\n        <div className=\"pinnedPost\">\r\n          <Post\r\n            postId={userDetails.pinnedPost._id}\r\n            firstName={userDetails.pinnedPost.postedBy.firstName}\r\n            lastName={userDetails.pinnedPost.postedBy.lastName}\r\n            username={userDetails.pinnedPost.postedBy.username}\r\n            content={userDetails.pinnedPost.content}\r\n            pinnedPost={true}\r\n            viewSinglePostReq={() =>\r\n              viewSinglePostReq(\r\n                userDetails.pinnedPost._id,\r\n                userDetails.pinnedPost.replyTo\r\n                  ? userDetails.pinnedPost.replyTo.originalPost._id\r\n                  : null\r\n              )\r\n            }\r\n            pinnedPostId={userDetails.pinnedPost._id}\r\n            createdAt={timeDifference(\r\n              new Date(),\r\n              new Date(\r\n                userDetails.pinnedPost.content\r\n                  ? userDetails.pinnedPost.createdAt\r\n                  : userDetails.pinnedPost.retweetData.createdAt\r\n              )\r\n            )}\r\n            profilePic={userDetails.pinnedPost.postedBy.profilePic}\r\n            likePostReq={() =>\r\n              likePostReq(\r\n                userDetails.pinnedPost._id,\r\n                userDetails.pinnedPost.replyTo\r\n                  ? userDetails.pinnedPost.replyTo.originalPost._id\r\n                  : null,\r\n                userDetails.pinnedPost.postedBy.username\r\n              )\r\n            }\r\n            likes={userDetails.pinnedPost.likes}\r\n            postActionLoading={postActionLoading}\r\n            loggedInUsername={\r\n              userDetails.username || localStorage.getItem(\"userName\")\r\n            }\r\n            goToProfile={() =>\r\n              goToProfile(userDetails.pinnedPost.postedBy.username)\r\n            }\r\n            retweetReq={() =>\r\n              retweetReq(\r\n                userDetails.pinnedPost._id,\r\n                userDetails.pinnedPost.retweetData\r\n                  ? userDetails.pinnedPost.retweetData._id\r\n                  : null,\r\n                userDetails.pinnedPost.postedBy.username\r\n              )\r\n            }\r\n            retweetActionLoading={retweetActionLoading}\r\n            retweetUsers={userDetails.pinnedPost.retweetUsers}\r\n            retweetData={userDetails.pinnedPost.retweetData}\r\n            submitReplyReq={submitReplyReq}\r\n            replyToUsername={\r\n              userDetails.pinnedPost.replyTo &&\r\n              userDetails.pinnedPost.replyTo.originalPost\r\n                ? userDetails.pinnedPost.replyTo.originalPost.postedBy.username\r\n                : null\r\n            }\r\n            replyPostTypeReplyToUsername={\r\n              userDetails.pinnedPost.postedBy.username\r\n            }\r\n            pinPost={() => pinPost(userDetails.pinnedPost._id)}\r\n          />\r\n        </div>\r\n      )}\r\n      {pages > 1 && (\r\n        <div className=\"paginate\">\r\n          <Paginate\r\n            handlePageChange={handlePageChange}\r\n            currentPage={currentPage}\r\n            pageSize={pageSize}\r\n            pages={pages}\r\n            totalItemsCount={totalItemsCount}\r\n          />\r\n        </div>\r\n      )}\r\n      {!postLoading && !errorMessage ? (\r\n        <PostsList\r\n          loggedInUsername={\r\n            userDetails\r\n              ? userDetails.username\r\n              : localStorage.getItem(\"username\")\r\n          }\r\n          retweetReq={retweetReq}\r\n          likePostReq={likePostReq}\r\n          postActionLoading={postActionLoading}\r\n          retweetActionLoading={retweetActionLoading}\r\n          posts={posts}\r\n          submitReplyReq={submitReplyReq}\r\n          viewSinglePostReq={viewSinglePostReq}\r\n          deletePost={deletePostReq}\r\n          goToProfile={goToProfile}\r\n          pinPost={pinPost}\r\n          pinnedPost={false}\r\n          pinnedPostId={\r\n            userDetails && userDetails.pinnedPost\r\n              ? userDetails.pinnedPost._id\r\n              : null\r\n          }\r\n        />\r\n      ) : postLoading && !errorMessage ? (\r\n        <Spinner width=\"60px\" />\r\n      ) : (\r\n        <h4 className=\"fetchpostserror\">Error in Fetching Posts</h4>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n"],"sourceRoot":""}