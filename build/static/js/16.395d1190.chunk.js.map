{"version":3,"sources":["components/MessageChat/ChatNameModel/ChatNameModel.js","components/MessageChat/MessageChat.js","store/Actions/chat.js"],"names":["ChatNameModel","closeChatNameModel","changeChatname","useState","inputVal","setInputVal","className","onClick","type","name","value","onChange","e","target","MessageChat","location","useLocation","dispatch","useDispatch","useSelector","state","chat","chatError","chatLoading","openModel","setOpenModel","useForm","handleSubmit","register","openChatNameModel","useEffect","pathname","split","getChatMsgs","then","history","push","to","chatUsers","users","filter","user","username","localStorage","getItem","groupChatNames","map","firstName","lastName","isGroupChat","src","profilePic","alt","length","chatName","join","renderImageAndNames","Spinner","width","onSubmit","formData","console","log","placeholder","ref","required","val","changeChatName","chatId","getState","a","CHAT_LOADING","token","axios","get","headers","Authorization","data","FETCH_CHAT_MESSAGES","CHAT_MESSAGES_ERROR","error","response","message","createChat","post","CREATE_CHAT","result","put","CHANGE_CHAT_NAME"],"mappings":"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","file":"static/js/16.395d1190.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ChatNameModel.scss\";\r\n\r\nconst ChatNameModel = ({closeChatNameModel, changeChatname}) => {\r\n\r\n    const [inputVal, setInputVal] = useState('');\r\n\r\n  return (\r\n    <div className=\"backdrop\">\r\n      <div className=\"changeChatModal\">\r\n        <div className=\"titleP\">\r\n          <h3>Change The Chat Name</h3>\r\n          <i className=\"fa fa-times\" onClick={closeChatNameModel}></i>\r\n        </div>\r\n        <div className=\"changeChatInput\">\r\n          <input type=\"text\" name=\"chatname\" value={inputVal} onChange={e => setInputVal(e.target.value)} />\r\n        </div>\r\n        <div className=\"btnActions\">\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            onClick={() => changeChatname(inputVal)}\r\n          >\r\n            Save\r\n          </button>\r\n          <button onClick={closeChatNameModel} className=\"btn btn-danger\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatNameModel;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport history from \"../../history\";\r\nimport { changeChatName, getChatMsgs } from \"../../store/Actions/chat\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport ChatNameModel from \"./ChatNameModel/ChatNameModel\";\r\nimport \"./MessageChat.scss\";\r\n\r\nconst MessageChat = () => {\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n  const { chatError, chatLoading, chat } = useSelector((state) => state.chat);\r\n  const [openModel, setOpenModel] = useState(false);\r\n\r\n  const { handleSubmit, register } = useForm();\r\n\r\n  const sendMsg = formData => {\r\n    console.log(formData);\r\n  };\r\n\r\n  const openChatNameModel = () => {\r\n    setOpenModel(true);\r\n  };\r\n  const closeChatNameModel = () => {\r\n    setOpenModel(false);\r\n  };\r\n\r\n  const renderImageAndNames = () => {\r\n    if (chat) {\r\n      const chatUsers = chat.users.filter(\r\n        (user) => user.username !== localStorage.getItem(\"userName\")\r\n      );\r\n      const groupChatNames = chatUsers.map(\r\n        (user) => user.firstName + \" \" + user.lastName\r\n      );\r\n      if (chat.isGroupChat && chatUsers[1]) {\r\n        return (\r\n          <>\r\n            <div className=\"images\">\r\n              <img\r\n                className=\"firstImg\"\r\n                src={chatUsers[0].profilePic}\r\n                alt={chatUsers[0].username}\r\n              />\r\n              <img\r\n                className=\"secondImg\"\r\n                src={chatUsers[1].profilePic}\r\n                alt={chatUsers[1].username}\r\n              />\r\n              {chatUsers.length > 2 && <span className=\"usersLeft\">+{chatUsers.length - 2}</span>}\r\n            </div>\r\n            <span className=\"chatname\" onClick={openChatNameModel}>{chat.chatName ? chat.chatName: groupChatNames.join(\", \")}</span>\r\n          </>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <div className=\"image\">\r\n              <img\r\n                className=\"singleImg\"\r\n                src={chatUsers[0].profilePic}\r\n                alt={chatUsers[0].username}\r\n              />\r\n            </div>\r\n            <span className=\"chatname\">\r\n              {chatUsers[0].firstName + \" \" + chatUsers[0].lastName}\r\n            </span>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const pathname = location.pathname.split(\"/\")[2];\r\n    if (!pathname) {\r\n      history.push(\"/messages\");\r\n    } else {\r\n      dispatch(getChatMsgs(pathname)).then(() => {});\r\n    }\r\n  }, [location.pathname, dispatch]);\r\n\r\n  const changeChatname = val => {\r\n    closeChatNameModel();\r\n    dispatch(changeChatName(location.pathname.split(\"/\")[2], val));\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className=\"messagechat\">\r\n      <div className=\"title\">\r\n        <h2>Chat</h2>\r\n        <Link to=\"/messages/new\">\r\n          <i className=\"far fa-plus-square\"></i>\r\n        </Link>\r\n      </div>\r\n      {chat && <div className=\"peoplesChat\">{renderImageAndNames()}</div>}\r\n      <div className=\"chats\">\r\n        {chatLoading ? (\r\n          <Spinner width=\"60px\" />\r\n        ) : chatError ? (\r\n          <h4 className=\"chaterror\">{chatError}</h4>\r\n        ) : (\r\n          <h1>Success</h1>\r\n        )}\r\n      </div>\r\n      <form className=\"submitMsg\" onSubmit={handleSubmit(sendMsg)}>\r\n        <input type=\"text\" name=\"msg\" placeholder=\"Type a message...\" ref={register({ required: true })} />\r\n        <button type=\"submit\">\r\n          <i className=\"fas fa-paper-plane\"></i>\r\n        </button>\r\n      </form>\r\n    </div>\r\n    {openModel && <ChatNameModel closeChatNameModel={closeChatNameModel} changeChatname={changeChatname} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MessageChat;\r\n","import axios from '../../axios';\r\nimport { CHANGE_CHAT_NAME, CHAT_LOADING, CHAT_MESSAGES_ERROR, CREATE_CHAT, FETCH_CHAT_MESSAGES } from './actionTypes';\r\n\r\nexport const getChatMsgs = chatId => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({type: CHAT_LOADING});\r\n            const token = getState().user && getState().user.token ? getState().user.token: localStorage.getItem('accessToken');\r\n            const {data} = await axios.get(`/chat/getMessages?chatId=${chatId}`, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n            dispatch({\r\n                type: FETCH_CHAT_MESSAGES,\r\n                chat: data\r\n            });\r\n        } catch(err) {\r\n            dispatch({\r\n                type: CHAT_MESSAGES_ERROR,\r\n                error: err.response && err.response.data && err.response.data.message\r\n                ? err.response.data.message\r\n                : err.message\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const createChat = (users, isGroupChat) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({type: CHAT_LOADING});\r\n            const {data} = await axios.post(`/chat/createChat?isGroupChat=${isGroupChat}`, {users}, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + (getState().user.token || localStorage.getItem('accessToken'))\r\n                }\r\n            });\r\n            const result = await dispatch({\r\n                type: CREATE_CHAT,\r\n                chat: data\r\n            });\r\n            return result;\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const changeChatName = (chatId, chatName) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            await axios.put(`/chat/changeChatName?chatId=${chatId}`, {chatName}, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + (getState().user.token || localStorage.getItem('accessToken'))\r\n                }\r\n            });\r\n            dispatch({\r\n                type: CHANGE_CHAT_NAME,\r\n                chatName: chatName\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n};"],"sourceRoot":""}