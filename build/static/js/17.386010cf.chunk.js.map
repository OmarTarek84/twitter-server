{"version":3,"sources":["store/Actions/chat.js","components/ChatNameModel/ChatNameModel.js","pages/MessageChat/MessageChat.js"],"names":["getChatMsgs","chatId","currentPage","pageSize","dispatch","getState","a","type","CHAT_LOADING","token","user","localStorage","getItem","axios","get","headers","Authorization","data","FETCH_CHAT_MESSAGES","chat","messages","pages","messagesCount","CHAT_MESSAGES_ERROR","error","response","message","createChat","users","isGroupChat","post","CREATE_CHAT","result","console","log","changeChatName","chatName","put","CHANGE_CHAT_NAME","sendMessage","content","newDate","Date","toISOString","SEND_MESSAGE","_id","createdAt","updatedAt","sender","coverPhoto","userDetails","firstName","lastName","profilePic","username","readBy","UPDATE_LATEST_MESSAGE","SEND_MESSAGE_ERROR","msgId","ChatNameModel","closeChatNameModel","changeChatname","useState","inputVal","setInputVal","className","onClick","name","value","onChange","e","target","MessageChat","location","useLocation","useDispatch","useSelector","state","chatError","chatLoading","currentMessagesPage","totalMessagesPages","openModel","setOpenModel","titleRef","useRef","peoplesRef","formRef","messageChatRef","socket","useSocket","useForm","handleSubmit","register","reset","openChatNameModel","useEffect","pathname","split","current","emit","then","allElementsHeightAdded","getBoundingClientRect","height","document","querySelector","style","maxHeight","list","getElementById","scrollTop","scrollHeight","clientHeight","history","push","CLEAR_MESSAGES","renderTheirsMsg","isFirst","isLast","marginTop","src","alt","ref","to","chatUsers","filter","groupChatNames","map","length","join","renderImageAndNames","id","onScroll","Spinner","width","msg","index","senderClassName","opacity","onSubmit","formData","email","notificationFrom","notificationTo","placeholder","required","val"],"mappings":"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","file":"static/js/17.386010cf.chunk.js","sourcesContent":["import axios from \"../../axios\";\r\nimport socketIOClient from 'socket.io-client';\r\nimport {\r\n  CHANGE_CHAT_NAME,\r\n  CHAT_LOADING,\r\n  CHAT_MESSAGES_ERROR,\r\n  CREATE_CHAT,\r\n  FETCH_CHAT_MESSAGES,\r\n  SEND_MESSAGE,\r\n  SEND_MESSAGE_ERROR,\r\n  UPDATE_LATEST_MESSAGE,\r\n} from \"./actionTypes\";\r\n\r\nexport const getChatMsgs = (chatId, currentPage, pageSize) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      if (currentPage === 1) {\r\n        dispatch({ type: CHAT_LOADING });\r\n      }\r\n      const token =\r\n        getState().user && getState().user.token\r\n          ? getState().user.token\r\n          : localStorage.getItem(\"accessToken\");\r\n      const { data } = await axios.get(`/chat/getMessages?chatId=${chatId}&currentPage=${currentPage}&pageSize=${pageSize}`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + token,\r\n        },\r\n      });\r\n      // console.log(data);\r\n      dispatch({\r\n        type: FETCH_CHAT_MESSAGES,\r\n        chat: data.chat,\r\n        messages: data.messages,\r\n        currentPage: data.currentPage,\r\n        pages: data.pages,\r\n        messagesCount: data.messagesCount,\r\n        pageSize: data.pageSize\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CHAT_MESSAGES_ERROR,\r\n        error:\r\n          err.response && err.response.data && err.response.data.message\r\n            ? err.response.data.message\r\n            : err.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const createChat = (users, isGroupChat) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: CHAT_LOADING });\r\n      const { data } = await axios.post(\r\n        `/chat/createChat?isGroupChat=${isGroupChat}`,\r\n        { users },\r\n        {\r\n          headers: {\r\n            Authorization:\r\n              \"Bearer \" +\r\n              (getState().user.token || localStorage.getItem(\"accessToken\")),\r\n          },\r\n        }\r\n      );\r\n      const result = await dispatch({\r\n        type: CREATE_CHAT,\r\n        chat: data,\r\n      });\r\n      return result;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const changeChatName = (chatId, chatName) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      await axios.put(\r\n        `/chat/changeChatName?chatId=${chatId}`,\r\n        { chatName },\r\n        {\r\n          headers: {\r\n            Authorization:\r\n              \"Bearer \" +\r\n              (getState().user.token || localStorage.getItem(\"accessToken\")),\r\n          },\r\n        }\r\n      );\r\n      dispatch({\r\n        type: CHANGE_CHAT_NAME,\r\n        chatName: chatName,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const sendMessage = (chatId, content) => {\r\n  return async (dispatch, getState) => {\r\n    const newDate = new Date().toISOString();\r\n    dispatch({\r\n      type: SEND_MESSAGE,\r\n      message: {\r\n        content: content,\r\n        _id: newDate,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        sender: {\r\n          coverPhoto: getState().user.userDetails.coverPhoto,\r\n          firstName: getState().user.userDetails.firstName,\r\n          lastName: getState().user.userDetails.lastName,\r\n          profilePic: getState().user.userDetails.profilePic,\r\n          username: getState().user.userDetails.username,\r\n        },\r\n        readBy: [],\r\n        chat: chatId,\r\n        error: false\r\n      },\r\n    });\r\n    try {\r\n      await axios.post(\r\n        `/chat/sendMessage?chatId=${chatId}`,\r\n        { content },\r\n        {\r\n          headers: {\r\n            Authorization:\r\n              \"Bearer \" +\r\n              (getState().user.token || localStorage.getItem(\"accessToken\")),\r\n          },\r\n        }\r\n      );\r\n      dispatch({\r\n          type: UPDATE_LATEST_MESSAGE,\r\n          content: content,\r\n          user: {\r\n            coverPhoto: getState().user.userDetails.coverPhoto,\r\n            firstName: getState().user.userDetails.firstName,\r\n            lastName: getState().user.userDetails.lastName,\r\n            profilePic: getState().user.userDetails.profilePic,\r\n            username: getState().user.userDetails.username,\r\n          },\r\n          chatId: chatId\r\n      });\r\n    } catch (err) {\r\n        console.log(err);\r\n      dispatch({\r\n        type: SEND_MESSAGE_ERROR,\r\n        msgId: newDate,\r\n      });\r\n    }\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./ChatNameModel.scss\";\r\n\r\nconst ChatNameModel = ({closeChatNameModel, changeChatname}) => {\r\n\r\n    const [inputVal, setInputVal] = useState('');\r\n\r\n  return (\r\n    <div className=\"backdrop\">\r\n      <div className=\"changeChatModal\">\r\n        <div className=\"titleP\">\r\n          <h3>Change The Chat Name</h3>\r\n          <i className=\"fa fa-times\" onClick={closeChatNameModel}></i>\r\n        </div>\r\n        <div className=\"changeChatInput\">\r\n          <input type=\"text\" name=\"chatname\" value={inputVal} onChange={e => setInputVal(e.target.value)} />\r\n        </div>\r\n        <div className=\"btnActions\">\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            onClick={() => changeChatname(inputVal)}\r\n          >\r\n            Save\r\n          </button>\r\n          <button onClick={closeChatNameModel} className=\"btn btn-danger\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatNameModel;\r\n","/* eslint-disable */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport history from \"../../history\";\r\nimport { CLEAR_MESSAGES } from \"../../store/Actions/actionTypes\";\r\nimport { changeChatName, getChatMsgs, sendMessage } from \"../../store/Actions/chat\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport ChatNameModel from \"../../components/ChatNameModel/ChatNameModel\";\r\nimport \"./MessageChat.scss\";\r\nimport useSocket from \"../../shared/socketCustomHook\";\r\n\r\nconst MessageChat = () => {\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n  const { chatError, chatLoading, chat, messages, currentMessagesPage, totalMessagesPages } = useSelector((state) => state.chat);\r\n  const { userDetails } = useSelector((state) => state.user);\r\n  const [openModel, setOpenModel] = useState(false);\r\n\r\n  const titleRef = useRef();\r\n  const peoplesRef = useRef();\r\n  const formRef = useRef();\r\n  const messageChatRef = useRef();\r\n\r\n  const {socket} = useSocket();\r\n\r\n  const { handleSubmit, register, reset } = useForm();\r\n\r\n  const sendMsg = formData => {\r\n    const content = formData.msg;\r\n    reset();\r\n    const list = document.getElementById(\"sc\");\r\n    socket.current.emit('sendMessage', {\r\n      sender: {\r\n        firstName: userDetails.firstName,\r\n        lastName: userDetails.lastName,\r\n        profilePic: userDetails.profilePic,\r\n        username: userDetails.username,\r\n        email: userDetails.email,\r\n      },\r\n      content: formData.msg,\r\n      chatId: location.pathname.split(\"/\")[2],\r\n      createdAt: new Date()\r\n    });\r\n    dispatch(sendMessage(location.pathname.split(\"/\")[2], content)).then(() => {\r\n      list.scrollTop = list.scrollHeight - list.clientHeight - 1;\r\n    });\r\n    const chatUsers = chat.users.map(user => user.username);\r\n    socket.current.emit('notification Sent', {\r\n      notificationFrom: userDetails.username,\r\n      notificationTo: chatUsers,\r\n      type: 'newMessage',\r\n      chatId: chat._id\r\n    });\r\n  };\r\n\r\n  const openChatNameModel = () => {\r\n    setOpenModel(true);\r\n  };\r\n  const closeChatNameModel = () => {\r\n    setOpenModel(false);\r\n  };\r\n\r\n  const renderImageAndNames = () => {\r\n    if (chat) {\r\n      const chatUsers = chat.users.filter(\r\n        (user) => user.username !== localStorage.getItem(\"userName\")\r\n      );\r\n      const groupChatNames = chatUsers.map(\r\n        (user) => user.firstName + \" \" + user.lastName\r\n      );\r\n      if (chat.isGroupChat && chatUsers[1]) {\r\n        return (\r\n          <>\r\n            <div className=\"images\">\r\n              <img\r\n                className=\"firstImg\"\r\n                src={chatUsers[0].profilePic}\r\n                alt={chatUsers[0].username}\r\n              />\r\n              <img\r\n                className=\"secondImg\"\r\n                src={chatUsers[1].profilePic}\r\n                alt={chatUsers[1].username}\r\n              />\r\n              {chatUsers.length > 2 && <span className=\"usersLeft\">+{chatUsers.length - 2}</span>}\r\n            </div>\r\n            <span className=\"chatname\" onClick={openChatNameModel}>{chat.chatName ? chat.chatName: groupChatNames.join(\", \")}</span>\r\n          </>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <div className=\"image\">\r\n              <img\r\n                className=\"singleImg\"\r\n                src={chatUsers[0].profilePic}\r\n                alt={chatUsers[0].username}\r\n              />\r\n            </div>\r\n            <span className=\"chatname\">\r\n              {chatUsers[0].firstName + \" \" + chatUsers[0].lastName}\r\n            </span>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const pathname = location.pathname.split(\"/\")[2];\r\n    if (!pathname) {\r\n      history.push(\"/messages\");\r\n    } else {\r\n\r\n      socket.current.emit('join room', pathname);\r\n\r\n      dispatch(getChatMsgs(pathname, 1, 30)).then(() => {\r\n\r\n        if (titleRef.current && peoplesRef.current && formRef.current) {\r\n          const allElementsHeightAdded = titleRef.current.getBoundingClientRect().height + peoplesRef.current.getBoundingClientRect().height + formRef.current.getBoundingClientRect().height + 26;\r\n          document.querySelector('.messages').style.maxHeight = `calc(100vh - ${allElementsHeightAdded}px)`;\r\n          var list = document.getElementById(\"sc\");\r\n          list.scrollTop = list.scrollHeight - list.clientHeight - 1;\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      dispatch({type: CLEAR_MESSAGES});\r\n    }\r\n  }, [location.pathname, dispatch]);\r\n\r\n  const changeChatname = val => {\r\n    closeChatNameModel();\r\n    dispatch(changeChatName(location.pathname.split(\"/\")[2], val));\r\n  };\r\n\r\n  const renderOwnMsg = (content, error) => {\r\n    return (\r\n      <div className=\"flCol\">\r\n      <span style={{\r\n        opacity: error ? '.4': '1'\r\n      }}>{content}</span>\r\n      {error && <p className=\"error\">Error Sending this message</p>}\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const renderTheirsMsg = (profilePic, firstName, lastName, username, content, isFirst, isLast) => {\r\n    return (\r\n      <div className=\"fl\" style={{marginTop: isFirst ? '12px': '0'}}>\r\n        <div className=\"image\">\r\n          {isLast && <img src={profilePic} alt={username} />}\r\n        </div>\r\n        <div className=\"content-names\">\r\n          {isFirst && <span className=\"firstlastnames\">{firstName} {lastName}</span>}\r\n          <span className=\"content\">{content}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const renderMessages = () => {\r\n    return messages.map((msg, index) => {\r\n      const username = userDetails ? userDetails.username: localStorage.getItem('userName');\r\n      const isFirst = !messages[index - 1] || messages[index - 1].sender.username !== messages[index].sender.username;\r\n      const isLast = !messages[index + 1] || !messages[index - 1] || (messages[index - 1].sender.username === messages[index].sender.username && messages[index + 1].sender.username !== messages[index].sender.username);\r\n      const senderClassName = msg.sender.username === username ? 'own': 'theirs';\r\n      return (\r\n        <div className={`msg${index} ${senderClassName}`} key={msg._id}>\r\n          {senderClassName === 'own' ? renderOwnMsg(msg.content, msg.error): renderTheirsMsg(msg.sender.profilePic, msg.sender.firstName, msg.sender.lastName, msg.sender.username, msg.content, isFirst, isLast)}\r\n        </div>\r\n      )\r\n    });\r\n  };\r\n\r\n  const msgsScroll = () => {\r\n      var list = document.getElementById(\"sc\");\r\n      if (list.scrollTop === 0 && currentMessagesPage + 1 <= totalMessagesPages) {\r\n        dispatch(getChatMsgs(location.pathname.split(\"/\")[2], currentMessagesPage + 1, 30)).then(() => {\r\n          list.scrollTop = (list.scrollHeight - list.clientHeight) / 2\r\n        });\r\n      }\r\n  };\r\n\r\n  console.log('CHAT RENDERED')\r\n\r\n  return (\r\n    <>\r\n    <div className=\"messagechat\">\r\n      <div className=\"title\" ref={titleRef}>\r\n        <h2>Chat</h2>\r\n        <Link to=\"/messages/new\">\r\n          <i className=\"far fa-plus-square\"></i>\r\n        </Link>\r\n      </div>\r\n      {chat && <div className=\"peoplesChat\" ref={peoplesRef}>{renderImageAndNames()}</div>}\r\n      <div className=\"messages\" ref={messageChatRef} id=\"sc\" onScroll={msgsScroll}>\r\n        {chatLoading ? (\r\n          <Spinner width=\"60px\" />\r\n        ) : chatError ? (\r\n          <h4 className=\"chaterror\">{chatError}</h4>\r\n        ) : renderMessages()}\r\n      </div>\r\n      <form className=\"submitMsg\" ref={formRef} onSubmit={handleSubmit(sendMsg)}>\r\n        <input type=\"text\" name=\"msg\" placeholder=\"Type a message...\" ref={register({ required: true })} />\r\n        <button type=\"submit\">\r\n          <i className=\"fas fa-paper-plane\"></i>\r\n        </button>\r\n      </form>\r\n    </div>\r\n    {openModel && <ChatNameModel closeChatNameModel={closeChatNameModel} changeChatname={changeChatname} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MessageChat;\r\n"],"sourceRoot":""}